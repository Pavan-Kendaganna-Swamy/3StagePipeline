Qflow synthesis logfile created on Tue Oct 3 04:06:56 PM PDT 2023
Running yosys for verilog parsing and synthesis
yosys  -s pipeline.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `pipeline.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v
Parsing Verilog input from `/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v' to AST representation.
Generating RTLIL representation for module `\pipeline'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \pipeline

3.1.2. Analyzing design hierarchy..
Top module:  \pipeline
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:27$6'.
     1/1: $0\F[7:0]
Creating decoders for process `\pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:21$4'.
     1/2: $0\y5[7:0]
     2/2: $0\y4[7:0]
Creating decoders for process `\pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:14$1'.
     1/3: $0\y3[7:0]
     2/3: $0\y2[7:0]
     3/3: $0\y1[7:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pipeline.\F' using process `\pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:27$6'.
  created $dff cell `$procdff$8' with positive edge clock.
Creating register for signal `\pipeline.\y5' using process `\pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:21$4'.
  created $dff cell `$procdff$9' with positive edge clock.
Creating register for signal `\pipeline.\y4' using process `\pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:21$4'.
  created $dff cell `$procdff$10' with positive edge clock.
Creating register for signal `\pipeline.\y1' using process `\pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:14$1'.
  created $dff cell `$procdff$11' with positive edge clock.
Creating register for signal `\pipeline.\y2' using process `\pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:14$1'.
  created $dff cell `$procdff$12' with positive edge clock.
Creating register for signal `\pipeline.\y3' using process `\pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:14$1'.
  created $dff cell `$procdff$13' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:27$6'.
Removing empty process `pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:21$4'.
Removing empty process `pipeline.$proc$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:14$1'.
Cleaned up 0 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module pipeline..
found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipeline.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pipeline:
  creating $macc model for $add$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:16$2 ($add).
  creating $macc model for $add$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:23$5 ($add).
  creating $macc model for $mul$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:29$7 ($mul).
  creating $macc model for $sub$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:17$3 ($sub).
  creating $alu model for $macc $sub$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:17$3.
  creating $alu model for $macc $add$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:23$5.
  creating $alu model for $macc $add$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:16$2.
  creating $macc cell for $mul$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:29$7: $auto$alumacc.cc:354:replace_macc$14
  creating $alu cell for $add$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:16$2: $auto$alumacc.cc:474:replace_alu$15
  creating $alu cell for $add$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:23$5: $auto$alumacc.cc:474:replace_alu$18
  creating $alu cell for $sub$/home/pavan/vsdflow/verilog/projects/pipeline/source/pipeline.v:17$3: $auto$alumacc.cc:474:replace_alu$21
  created 3 $alu and 1 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipeline.
Performed a total of 0 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.13.9. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipeline.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=8\Y_WIDTH=8 for cells of type $alu.
Using extmapper maccmap for cells of type $macc.
  add \y4 * \y5 (8x8 bits, unsigned)
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=8 for cells of type $lcu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_fa\WIDTH=8 for cells of type $fa.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~333 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.
<suppressed ~237 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..
Removed 73 unused cells and 202 unused wires.
<suppressed ~74 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\pipeline' to `<abc-temp-dir>/input.blif'..
Extracted 270 gates and 335 wires to a netlist network with 64 inputs and 32 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       55
ABC RESULTS:            ANDNOT cells:       27
ABC RESULTS:              AOI3 cells:       21
ABC RESULTS:              NAND cells:        6
ABC RESULTS:               NOR cells:        8
ABC RESULTS:               NOT cells:       12
ABC RESULTS:              OAI3 cells:        6
ABC RESULTS:                OR cells:       13
ABC RESULTS:              XNOR cells:       33
ABC RESULTS:               XOR cells:       64
ABC RESULTS:        internal signals:      239
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       32
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..
Removed 0 unused cells and 181 unused wires.
<suppressed ~1 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \pipeline

3.25.2. Analyzing design hierarchy..
Top module:  \pipeline
Removed 0 unused modules.

3.26. Printing statistics.

=== pipeline ===

   Number of wires:                228
   Number of wire bits:            326
   Number of public wires:          11
   Number of public wire bits:      81
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                293
     $_ANDNOT_                      27
     $_AND_                         55
     $_AOI3_                        21
     $_DFF_P_                       48
     $_NAND_                         6
     $_NOR_                          8
     $_NOT_                         12
     $_OAI3_                         6
     $_OR_                          13
     $_XNOR_                        33
     $_XOR_                         64

3.27. Executing CHECK pass (checking for obvious problems).
checking module pipeline..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\pipeline':
  mapped 48 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipeline.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\pipeline' to `<abc-temp-dir>/input.blif'..
Extracted 245 gates and 309 wires to a netlist network with 64 inputs and 32 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       11
ABC RESULTS:           AOI21X1 cells:       57
ABC RESULTS:           AOI22X1 cells:        6
ABC RESULTS:             INVX1 cells:       59
ABC RESULTS:           NAND2X1 cells:       59
ABC RESULTS:           NAND3X1 cells:       75
ABC RESULTS:            NOR2X1 cells:       48
ABC RESULTS:            NOR3X1 cells:        5
ABC RESULTS:           OAI21X1 cells:       61
ABC RESULTS:           OAI22X1 cells:        5
ABC RESULTS:             OR2X2 cells:        3
ABC RESULTS:           XNOR2X1 cells:       26
ABC RESULTS:            XOR2X1 cells:       22
ABC RESULTS:        internal signals:      213
ABC RESULTS:           input signals:       64
ABC RESULTS:          output signals:       32
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 309 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port pipeline.A: Missing option -inpad.
Don't map input port pipeline.B: Missing option -inpad.
Don't map input port pipeline.C: Missing option -inpad.
Don't map input port pipeline.D: Missing option -inpad.
Mapping port pipeline.F using BUFX2.
Don't map input port pipeline.clk: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pipeline..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pipeline.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pipeline'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pipeline..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pipeline.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== pipeline ===

   Number of wires:                421
   Number of wire bits:            526
   Number of public wires:         421
   Number of public wire bits:     526
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                493
     AND2X2                         11
     AOI21X1                        57
     AOI22X1                         6
     BUFX2                           8
     DFFPOSX1                       48
     INVX1                          59
     NAND2X1                        59
     NAND3X1                        75
     NOR2X1                         48
     NOR3X1                          5
     OAI21X1                        61
     OAI22X1                         5
     OR2X2                           3
     XNOR2X1                        26
     XOR2X1                         22

End of script. Logfile hash: c22844460c
CPU: user 0.22s system 0.01s, MEM: 19.28 MB total, 13.11 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 15% 16x opt_clean (0 sec), 14% 2x techmap (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl pipeline_mapped.blif pipeline /usr/local/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I pipeline_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif pipeline.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 19 (load 397.69) from node y5[0],
driven by DFFPOSX1 with strength 126.421 (fF driven at latency 100)
Top fanout load-to-strength ratio is 3.14576 (latency = 314.576 ps)
Top input node fanout is 48 (load 1340.33) from node clk.
Warning 1: load of 108.187 is 1.85254 times greater than strongest gate NAND2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 23: load of 115.567 is 1.98596 times greater than strongest gate NOR2X1
Warning 62: load of 124.351 is 2.12933 times greater than strongest gate NAND2X1
Warning 89: load of 154.41 is 2.67986 times greater than strongest gate NAND3X1
Warning 185: load of 407.69 is 3.22486 times greater than strongest gate DFFPOSX1
209 gates exceed specified minimum load.
14 buffers were added.
9 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 471    	Out: 462    	-9
	"2" gates	In: 22    	Out: 31    	+9

Number of gates changed: 23
gates resized: 23
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 11 (load 512.833) from node y4[2],
driven by DFFPOSX1 with strength 126.421 (fF driven at latency 100)
Top fanout load-to-strength ratio is 2.50631 (latency = 250.631 ps)
Top input node fanout is 6 (load 224.348) from node clk.
Warning 1: load of 522.833 is 2.25733 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 95: load of 154.41 is 2.67986 times greater than strongest gate NAND3X1
216 gates exceed specified minimum load.
0 buffers were added.
9 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 468    	Out: 468    	+0
	"2" gates	In: 39    	Out: 30    	-9

Number of gates changed: 9
gates resized: 9
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 11 (load 512.833) from node y4[2],
driven by DFFPOSX1 with strength 126.421 (fF driven at latency 100)
Top fanout load-to-strength ratio is 2.50631 (latency = 250.631 ps)
Top input node fanout is 6 (load 224.348) from node clk.
Warning 1: load of 522.833 is 2.25733 times greater than strongest gate CLKBUF1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 103: load of 154.41 is 2.67986 times greater than strongest gate NAND3X1
224 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 468    	Out: 468    	+0
	"2" gates	In: 30    	Out: 30    	+0
	"4" gates	In: 9    	Out: 9    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/pavan/vsdflow/verilog/projects/pipeline/synthesis
Files:
   Verilog: /home/pavan/vsdflow/verilog/projects/pipeline/synthesis/pipeline.rtl.v
   Verilog: /home/pavan/vsdflow/verilog/projects/pipeline/synthesis/pipeline.rtlnopwr.v
   Verilog: /home/pavan/vsdflow/verilog/projects/pipeline/synthesis/pipeline.rtlbb.v
   Spice:   /home/pavan/vsdflow/verilog/projects/pipeline/synthesis/pipeline.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f pipeline.spc pipeline.xspice

Synthesis script ended on Tue Oct 3 04:06:56 PM PDT 2023
